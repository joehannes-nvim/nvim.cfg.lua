.TH jq
.PP
.RS
A command\-line JSON processor that uses a domain\-specific language (DSL).
More information: \[la]https://stedolan.github.io/jq/manual/\[ra]\&.
.RE
.RS
.IP \(bu 2
Execute a specific expression (print a colored and formatted JSON output):
.RE
.PP
\fB\fC{{cat path/to/file.json}} | jq '.'\fR
.RS
.IP \(bu 2
Execute a specific script:
.RE
.PP
\fB\fC{{cat path/to/file.json}} | jq \-\-from\-file {{path/to/script.jq}}\fR
.RS
.IP \(bu 2
Pass specific arguments:
.RE
.PP
\fB\fC{{cat path/to/file.json}} | jq {{\-\-arg "name1" "value1" \-\-arg "name2" "value2" ...}} '{{. + $ARGS.named}}'\fR
.RS
.IP \(bu 2
Print specific keys:
.RE
.PP
\fB\fC{{cat path/to/file.json}} | jq '{{.key1, .key2, ...}}'\fR
.RS
.IP \(bu 2
Print specific array items:
.RE
.PP
\fB\fC{{cat path/to/file.json}} | jq '{{.[index1], .[index2], ...}}'\fR
.RS
.IP \(bu 2
Print all array items/object keys:
.RE
.PP
\fB\fC{{cat path/to/file.json}} | jq '.[]'\fR
.RS
.IP \(bu 2
Add/remove specific keys:
.RE
.PP
\fB\fC{{cat path/to/file.json}} | jq '. {{+|\-}} {{{"key1": "value1", "key2": "value2", ...}}}'\fR
