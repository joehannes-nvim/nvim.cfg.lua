.TH julia
.PP
.RS
A high\-level, high\-performance dynamic programming language for technical computing.
More information: \[la]https://docs.julialang.org/en/v1/manual/getting-started/\[ra]\&.
.RE
.RS
.IP \(bu 2
Start a REPL (interactive shell):
.RE
.PP
\fB\fCjulia\fR
.RS
.IP \(bu 2
Execute a Julia program and exit:
.RE
.PP
\fB\fCjulia {{program.jl}}\fR
.RS
.IP \(bu 2
Execute a Julia program that takes arguments:
.RE
.PP
\fB\fCjulia {{program.jl}} {{arguments}}\fR
.RS
.IP \(bu 2
Evaluate a string containing Julia code:
.RE
.PP
\fB\fCjulia \-e '{{julia_code}}'\fR
.RS
.IP \(bu 2
Evaluate a string of Julia code, passing arguments to it:
.RE
.PP
\fB\fCjulia \-e '{{for x in ARGS; println(x); end}}' {{arguments}}\fR
.RS
.IP \(bu 2
Evaluate an expression and print the result:
.RE
.PP
\fB\fCjulia \-E '{{(1 \- cos(pi/4))/2}}'\fR
.RS
.IP \(bu 2
Start Julia in parallel mode, using N worker processes:
.RE
.PP
\fB\fCjulia \-p {{N}}\fR
