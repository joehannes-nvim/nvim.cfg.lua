.TH cargo
.PP
.RS
Manage Rust projects and their module dependencies (crates).
Some subcommands such as \fB\fCbuild\fR have their own usage documentation.
More information: \[la]https://doc.rust-lang.org/cargo\[ra]\&.
.RE
.RS
.IP \(bu 2
Search for crates:
.RE
.PP
\fB\fCcargo search {{search_string}}\fR
.RS
.IP \(bu 2
Install a binary crate:
.RE
.PP
\fB\fCcargo install {{crate_name}}\fR
.RS
.IP \(bu 2
List installed binary crates:
.RE
.PP
\fB\fCcargo install \-\-list\fR
.RS
.IP \(bu 2
Create a new binary or library Rust project in the specified directory (or the current working directory by default):
.RE
.PP
\fB\fCcargo init \-\-{{bin|lib}} {{path/to/directory}}\fR
.RS
.IP \(bu 2
Add a dependency to \fB\fCCargo.toml\fR in the current directory:
.RE
.PP
\fB\fCcargo add {{dependency}}\fR
.RS
.IP \(bu 2
Build the Rust project in the current directory using the release profile:
.RE
.PP
\fB\fCcargo build \-\-release\fR
.RS
.IP \(bu 2
Build the Rust project in the current directory using the nightly compiler (requires \fB\fCrustup\fR):
.RE
.PP
\fB\fCcargo +nightly build\fR
.RS
.IP \(bu 2
Build using a specific number of threads (default is the number of logical CPUs):
.RE
.PP
\fB\fCcargo build \-\-jobs {{number_of_threads}}\fR
