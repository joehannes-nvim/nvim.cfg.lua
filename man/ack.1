.TH ack
.PP
.RS
A search tool like grep, optimized for developers.
See also: \fB\fCrg\fR, which is much faster.
More information: \[la]https://beyondgrep.com/documentation\[ra]\&.
.RE
.RS
.IP \(bu 2
Search for files containing a string or regular expression in the current directory recursively:
.RE
.PP
\fB\fCack "{{search_pattern}}"\fR
.RS
.IP \(bu 2
Search for a case\-insensitive pattern:
.RE
.PP
\fB\fCack \-\-ignore\-case "{{search_pattern}}"\fR
.RS
.IP \(bu 2
Search for lines matching a pattern, printing [o]nly the matched text and not the rest of the line:
.RE
.PP
\fB\fCack \-o "{{search_pattern}}"\fR
.RS
.IP \(bu 2
Limit search to files of a specific type:
.RE
.PP
\fB\fCack \-\-type={{ruby}} "{{search_pattern}}"\fR
.RS
.IP \(bu 2
Do not search in files of a specific type:
.RE
.PP
\fB\fCack \-\-type=no{{ruby}} "{{search_pattern}}"\fR
.RS
.IP \(bu 2
Count the total number of matches found:
.RE
.PP
\fB\fCack \-\-count \-\-no\-filename "{{search_pattern}}"\fR
.RS
.IP \(bu 2
Print the file names and the number of matches for each file only:
.RE
.PP
\fB\fCack \-\-count \-\-files\-with\-matches "{{search_pattern}}"\fR
.RS
.IP \(bu 2
List all the values that can be used with \fB\fC\-\-type\fR:
.RE
.PP
\fB\fCack \-\-help\-types\fR
